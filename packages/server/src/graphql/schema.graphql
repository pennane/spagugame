enum CacheControlScope {
  PUBLIC
  PRIVATE
}

directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
  inheritMaxAge: Boolean
) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

scalar Date

enum GameType {
  FIND_FOUR
  TICK_TACK_TOE
  COLOR_FLOOD
}

enum UserRole {
  USER
  ADMIN
}

# Static mongo types

## Achievements

interface UnlockCriteria {
  gameType: GameType
}

type OtherUnlockCriteria implements UnlockCriteria {
  gameType: GameType
}

type TotalWinsUnlockCriteria implements UnlockCriteria {
  gameType: GameType
  wins: Int!
}
type WinStreakUnlockCriteria implements UnlockCriteria {
  gameType: GameType
  streak: Int!
}
type TotalPlayedUnlockCriteria implements UnlockCriteria {
  gameType: GameType
  played: Int!
}
type LeaderboardRankUnlockCriteria implements UnlockCriteria {
  gameType: GameType
  rank: Int!
}

union AchievementUnlockCriteriaUnion =
    TotalWinsUnlockCriteria
  | WinStreakUnlockCriteria
  | TotalPlayedUnlockCriteria
  | LeaderboardRankUnlockCriteria
  | OtherUnlockCriteria

type Achievement {
  _id: ID!
  name: String!
  description: String!
  criteria: AchievementUnlockCriteriaUnion!
}

## Leaderboard
type LeaderboardPlayer {
  _id: ID!
  userId: ID!
  githubId: ID
  userName: String
  totalWins: Int!
  totalPlayed: Int!
  elo: Float!
}

type Leaderboard @cacheControl(maxAge: 900, scope: PUBLIC) {
  _id: ID!
  updatedAt: Date!
  gameType: GameType!
  players: [LeaderboardPlayer!]!
}

type LeaderboardRank {
  gameType: GameType!
  rank: Int!
}

## User

type User {
  _id: ID!
  githubId: ID!
  userName: String!
  description: String
  stats(gameTypes: [GameType!]): [UserStats!]!
  playedGames(gameTypes: [GameType!], first: Int): [PlayedGame!]!
  roles: [UserRole!]!
  joinedAt: Date!
  achievements: [Achievement!]!
  leaderboardRanks(gameTypes: [GameType!]): [LeaderboardRank!]!
  followers: [User!]!
  following: [User!]!
}

input UserInput {
  userName: String
  description: String
}

## UserStats

type UserStats {
  _id: ID!
  userId: ID!
  gameType: GameType!
  totalWins: Int!
  totalPlayed: Int!
  elo: Float!
}

## Game

type Game {
  _id: ID!
  type: GameType!
  name: String!
  description: String!
  ongoingGames: [OngoingGame!]!
  minPlayers: Int!
  maxPlayers: Int!
}

## PlayedGame

type PlayedGame {
  _id: ID!
  ongoingGameId: ID
  gameType: GameType!
  playerIds: [ID!]!
  playerScores: [Int!]!
  playerElosBefore: [Float!]!
  playerElosAfter: [Float!]!
  startedAt: Date!
  finishedAt: Date!
  finalState: String
}

# Ongoing game types

type OngoingGamePlayer {
  userId: ID!
  score: Int!
  ready: Boolean!
}

enum OngoingGameProcessState {
  NOT_STARTED
  STARTING
  ONGOING
  FINISHED
  CANCELLED
}

type OngoingGame {
  _id: ID!
  gameType: GameType!
  processState: OngoingGameProcessState!
  jsonState: String!
  players: [OngoingGamePlayer!]!
  currentTurn: ID
  startedAt: Float
  startsIn: Int
  isPrivate: Boolean!
  playedGameId: ID
  winnerIds: [ID!]
}

type OngoingGameStateChange {
  _id: ID
  gameType: GameType
  processState: OngoingGameProcessState
  jsonState: String
  players: [OngoingGamePlayer!]
  currentTurn: ID
  startsIn: Int
  playedGameId: ID
  winnerIds: [ID!]
}

type Query {
  achievements: [Achievement!]!
  ongoingGame(ongoingGameId: ID!): OngoingGame!
  user(id: ID!): User
  users(ids: [ID!], nameIncludes: String): [User!]!
  currentUser: User
  game(gameType: GameType): Game
  games: [Game!]!
  usersStats(userIds: [ID!]!, gameType: GameType!): [UserStats!]!
  playedGame(id: ID, ongoingGameId: ID): PlayedGame
  playedGames(gameTypes: [GameType!], first: Int): [PlayedGame!]!
  leaderboards(gameTypes: [GameType!]!): [Leaderboard!]!
}

type Subscription {
  ongoingGameStateChange(ongoingGameId: ID!): OngoingGameStateChange!
  newOngoingGame(gameType: GameType): OngoingGame!
  achievementUnlock(userId: ID!): [Achievement!]!
}

type Mutation {
  createOngoingGame(gameType: GameType!, isPrivate: Boolean): OngoingGame!
  joinOngoingGame(ongoingGameId: ID!): OngoingGame!
  leaveOngoingGame(ongoingGameId: ID!): OngoingGame!
  playTurn(ongoingGameId: ID!, json: String!): OngoingGame!
  toggleReady(ongoingGameId: ID!, ready: Boolean!): OngoingGame!
  updateUser(userInput: UserInput): User!
  # Returns the currentUser
  toggleFollow(userId: ID!, toggle: Boolean!): User!
  debug(tokens: [String!]!): Boolean!
}
