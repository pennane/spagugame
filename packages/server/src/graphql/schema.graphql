scalar Date

enum GameType {
  TICK_TACK_TOE
}

enum UserRole {
  USER
  ADMIN
}

# Static mongo types

## User

type User {
  _id: ID!
  githubId: ID!
  userName: String!
  description: String
  roles: [UserRole!]!
  joinedAt: Date!
}

input UserInput {
  userName: String
  description: String
}

## UserStats

type UserStats {
  _id: ID!
  userId: ID!
  gameType: GameType!
  totalWins: Int!
  elo: Int!
}

## Game

type Game {
  _id: ID!
  type: GameType!
  name: String!
  description: String!
  ongoingGameIds: [ID!]!
  minPlayers: Int!
  maxPlayers: Int!
}

## PlayedGame

type PlayedGame {
  _id: ID!
  gameType: GameType!
  playerIds: [ID!]!
  playerScores: [Int!]!
  playerElosBefore: [Int!]!
  playerElosAfter: [Int!]!
  startedAt: Date!
  finishedAt: Date!
}

# Ongoing game types

type OngoingGamePlayer {
  userId: ID!
  score: Int!
}

enum OngoingGameProcessState {
  NOT_STARTED
  STARTING
  ONGOING
  FINISHED
  CANCELLED
}

type OngoingGame {
  _id: ID!
  gameType: GameType!
  processState: OngoingGameProcessState!
  jsonState: String!
  players: [OngoingGamePlayer!]!
  currentTurn: ID
  startedAt: Float
}

type OngoingGameStateChange {
  _id: ID
  gameType: GameType
  processState: OngoingGameProcessState
  jsonState: String
  players: [OngoingGamePlayer!]
  currentTurn: ID
  startsIn: Int
}

type Query {
  ongoingGame(ongoingGameId: ID!): OngoingGame!
  user(id: ID!): User
  users(ids: [ID!]!): [User!]!
  currentUser: User
  game(gameType: GameType): Game
  games: [Game!]!
  userStats(userId: ID!, gameType: GameType!): UserStats
  usersStats(userIds: [ID!]!, gameType: GameType!): [UserStats!]!
}

type Subscription {
  ongoingGameStateChange(ongoingGameId: ID!): OngoingGameStateChange!
  testCounter: Int!
}

type Mutation {
  createOngoingGame(gameType: GameType!): OngoingGame!
  joinOngoingGame(ongoingGameId: ID!): OngoingGame!
  playTurn(ongoingGameId: ID!, json: String!): OngoingGame!
  updateUser(userInput: UserInput): User!
}
